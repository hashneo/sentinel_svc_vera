---
swagger: '2.0'
info:
  description: ''
  version: '0.0.1'
  title: 'data'
  termsOfService: ''
  contact:
    name: ''
    url: ''
    email: 'steven.taylor@me.com'
  license:
    name: 'Steven Taylor'
host: localhost
basePath: /
schemes:
- https
consumes:
- application/json
produces:
- application/json

securityDefinitions:
  Oauth:
    type: oauth2
    scopes:
      open: no security
      user: a user
    flow: implicit
    authorizationUrl: https://my_aouth/

security:
  - Oauth: []

paths:
  /health:
    x-swagger-router-controller: health
    get:
      tags:
      - health
      operationId: health
      security:
      - Oauth:
        - open
      responses:
        200:
          description: health information
          schema:
            $ref: '#/definitions/Status'
        default:
          $ref: '#/responses/Error'

  /system:
    x-swagger-router-controller: system
    get:
      operationId: getSystem
      security:
      - Oauth:
        - user
      responses:
        200:
          description: ok
          schema:
            type: object
        default:
          $ref: '#/responses/Error'

  /status:
    x-swagger-router-controller: system
    get:
      operationId: getStatus
      security:
      - Oauth:
        - user
      responses:
        200:
          description: ok
          schema:
            type: object
        default:
          $ref: '#/responses/Error'

  /device/{id}/status:
    x-swagger-router-controller: system
    get:
      operationId: getDeviceStatus
      security:
      - Oauth:
        - user
      parameters:
      - in: path
        name: id
        required: true
        type: string
      responses:
        200:
          description: ok
          schema:
            type: object
        default:
          $ref: '#/responses/Error'

  /light/{id}/{state}:
    x-swagger-router-controller: light
    get:
      operationId: setLightState
      security:
      - Oauth:
        - user
      parameters:
      - in: path
        name: id
        required: true
        type: string
      - in: path
        name: state
        required: true
        type: string
        enum: [
          on,
          off
        ]
      responses:
        200:
          description: ok
          schema:
            type: object
        default:
          $ref: '#/responses/Error'

  /light/{id}/level/{value}:
    x-swagger-router-controller: light
    get:
      operationId: setLightLevel
      security:
      - Oauth:
        - user
      parameters:
      - in: path
        name: id
        required: true
        type: string
      - in: path
        name: value
        required: true
        type: string
      responses:
        200:
          description: ok
          schema:
            type: object
        default:
          $ref: '#/responses/Error'

  /lock/{id}/{state}:
    x-swagger-router-controller: lock
    get:
      operationId: setLockState
      security:
      - Oauth:
        - user
      parameters:
      - in: path
        name: id
        required: true
        type: string
      - in: path
        name: state
        required: true
        type: string
        enum: [
          open,
          closed
        ]
      responses:
        200:
          description: ok
          schema:
            type: object
        default:
          $ref: '#/responses/Error'

  /hvac/{id}/{mode}:
    x-swagger-router-controller: hvac
    get:
      operationId: setHvacMode
      security:
      - Oauth:
        - user
      parameters:
      - in: path
        name: id
        required: true
        type: string
      - in: path
        name: mode
        required: true
        type: string
        enum: [
          heat,
          cool,
          auto,
          fan,
          off
        ]
      responses:
        200:
          description: ok
          schema:
            type: object
        default:
          $ref: '#/responses/Error'

  /hvac/{id}/{mode}/set/{temp}:
    x-swagger-router-controller: hvac
    get:
      operationId: setHvacTemp
      security:
      - Oauth:
        - user
      parameters:
      - in: path
        name: id
        required: true
        type: string
      - in: path
        name: mode
        required: true
        type: string
        enum: [
          heat,
          cool
        ]
      - in: path
        name: temp
        required: true
        type: string
      responses:
        200:
          description: ok
          schema:
            type: object
        default:
          $ref: '#/responses/Error'

  /hvac/{id}/fan/{mode}:
    x-swagger-router-controller: hvac
    get:
      operationId: setHvacFanMode
      security:
      - Oauth:
        - user
      parameters:
      - in: path
        name: id
        required: true
        type: string
      - in: path
        name: mode
        required: true
        type: string
        enum: [
          auto,
          continuous,
          periodic,
          off
        ]
      responses:
        200:
          description: ok
          schema:
            type: object
        default:
          $ref: '#/responses/Error'

  /alarm/{id}/arm/{mode}?code={pin}:
    x-swagger-router-controller: alarm
    get:
      operationId: setAlarmArmedMode
      security:
      - Oauth:
        - user
      parameters:
      - in: path
        name: id
        required: true
        type: string
      - in: path
        name: mode
        required: true
        type: string
        enum: [
           away,
           stay,
           night,
           vacation
        ]
      - in: path
        name: pin
        required : true
        type: string
      responses:
        200:
          description: ok
          schema:
            type: object
        default:
          $ref: '#/responses/Error'

  /alarm/{id}/disarm?code={pin}:
    x-swagger-router-controller: alarm
    get:
      operationId: setAlarmDisarmed
      security:
      - Oauth:
        - user
      parameters:
      - in: path
        name: id
        required: true
        type: string
      - in: path
        name: pin
        required : true
        type: string
      responses:
        200:
          description: ok
          schema:
            type: object
        default:
          $ref: '#/responses/Error'

  /alarm/{id}/chime/{state}?code={pin}:
    x-swagger-router-controller: alarm
    get:
      operationId: setAlarmChimeState
      security:
      - Oauth:
        - user
      parameters:
      - in: path
        name: id
        required: true
        type: string
      - in: path
        name: state
        required: true
        type: string
        enum: [ on, off, toggle ]
      - in: path
        name: pin
        required : true
        type: string
      responses:
        200:
          description: ok
          schema:
            type: object
        default:
          $ref: '#/responses/Error'

  /swagger:
      x-swagger-pipe: swagger_raw

responses:

  Error:
    description: error
    schema:
      $ref: '#/definitions/Error'

definitions:

  Error:
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string


  Status:
    type: object
    additionalProperties: false
    properties:
      status:
        type: string
